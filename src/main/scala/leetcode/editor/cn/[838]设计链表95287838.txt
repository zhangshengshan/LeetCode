class MyLinkedList() {
  class ListNode(v:Int) {
    val x :Int = v
    var next :ListNode = null 
    var prev :ListNode = null
  }
  /** Initialize your data structure here. */
  val head = new ListNode(Int.MaxValue)
  val tail = new ListNode(Int.MinValue)
  head.next = tail 
  tail.prev = head

  /** Get the value of the index-th node in the linked list. If the index is invalid, return -1. */
  def get(index: Int): Int = {
    var cnt = index 
    var ptr = head.next 
    while(cnt > 0 ){
      if(ptr == null) return -1 
      else ptr = ptr.next
      cnt -= 1
    }
    return ptr.x
  }

  /** Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. */
  def addAtHead(`val`: Int) {
    val node = new ListNode(`val`)
    node.prev = head 
    node.next = head.next 
    node.prev.next = node 
    node.next.prev = node
  }

  /** Append a node of value val to the last element of the linked list. */
  def addAtTail(`val`: Int) {
    val node = new ListNode(`val`) 
    node.next = tail
    node.prev = tail.prev
    node.prev.next = node 
    node.next.prev = node
  }

  /** Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. */
  def addAtIndex(index: Int, `val`: Int) {

    var cnt = index 

    var ptr = head
    while(cnt > 0){
      if(ptr == null) return 
      ptr = ptr.next
      cnt -= 1
    }
    val node = new ListNode(`val`)
    val next = ptr.next 
    ptr.next = node 
    node.next = next 
    next.prev = node
    node.prev = ptr
  }

  /** Delete the index-th node in the linked list, if the index is valid. */
  def deleteAtIndex(index: Int) {

    var cnt = index 
    var ptr = head
    while(cnt > 0){
      if(ptr == null) return 
      ptr = ptr.next
      cnt -= 1
    }

    ptr.next = ptr.next.next
    ptr.next.prev = ptr

  }

  def walk(){
    var ptr = head.next 
    while(ptr != null){
      if(ptr != this.tail){
        println("ptr.x", ptr.x)
      }
      ptr = ptr.next
    }
  }
  

  def reverseWalk(){

  }
}
//val obj = new MyLinkedList()
//obj.addAtHead(7)
//obj.addAtHead(2)
//obj.addAtHead(1)
//obj.addAtIndex(3,0)
//obj.deleteAtIndex(2)
//obj.addAtHead(6)
//obj.addAtTail(4)
//obj.get(4)
//obj.addAtHead(4)
//obj.addAtIndex(5,0)
//obj.addAtHead(6)

//runtime_error:java.lang.NullPointerException
//last_testcase:["MyLinkedList","addAtHead","deleteAtIndex","addAtHead","addAtHead","addAtHead","addAtHead","addAtHead","addAtTail","get","deleteAtIndex","deleteAtIndex"] [[],[2],[1],[2],[7],[3],[2],[5],[5],[5],[6],[4]]
