class MyLinkedList() {

  class ListNode(v:Int) {
    val x :Int = v
    var next :ListNode = null 
    var prev :ListNode = null
  }
  /** Initialize your data structure here. */

  val head = new ListNode(Int.MaxValue)
  val tail = new ListNode(Int.MinValue)

  /** Get the value of the index-th node in the linked list. If the index is invalid, return -1. */
  def get(index: Int): Int = {
    var cnt = index 
    var ptr = this.head
    while(cnt > 0) {
      if(ptr != null) {
        ptr = ptr.next
      }else {
        return -1
      }
      cnt -= 1
    }
    ptr.next.x
  }




  /** Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. */
  def addAtHead(`val`: Int) {
    val toBeAdd = new ListNode(`val`)
    val next = head.next
    head.next = toBeAdd
    toBeAdd.next= next
    if(tail.prev == null){
      tail.prev = toBeAdd
    }
  }

  /** Append a node of value val to the last element of the linked list. */
  def addAtTail(`val`: Int) {

    val toBeAdd = new ListNode(`val`)

    val prev = tail.prev

    prev.next = toBeAdd
    tail.prev = toBeAdd
  }

  /** Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. */
  def addAtIndex(index: Int, `val`: Int) {

    var cnt = index 
    var ptr = this.head

    while(cnt > 0) {
      if(ptr != null) ptr = ptr.next
      else return
      cnt -= 1
    }

    val toBeAdded = new ListNode(`val`)
    val nextNode = ptr.next 

    ptr.next = toBeAdded
    toBeAdded.next = nextNode

  }

  /** Delete the index-th node in the linked list, if the index is valid. */
  def deleteAtIndex(index: Int) {

    var cnt = index 
    var ptr = this.head

    while(cnt > 0) {
      if(ptr != null) ptr = ptr.next
      else return
      cnt -= 1
    }

    if(ptr.next == null) return 
    else ptr.next = ptr.next.next
  }

}

//var obj = new MyLinkedList()
//obj.addAtHead(1)
//obj.addAtTail(2)
//obj.addAtIndex(1,3)

//runtime_error:java.lang.NullPointerException
//last_testcase:["MyLinkedList","addAtHead","addAtHead","addAtHead","addAtIndex","deleteAtIndex","addAtHead","addAtTail","get","addAtHead","addAtIndex","addAtHead"] [[],[7],[2],[1],[3,0],[2],[6],[4],[4],[4],[5,0],[6]]
