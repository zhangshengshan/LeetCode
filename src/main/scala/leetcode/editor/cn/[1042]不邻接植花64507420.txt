object Solution {
  def gardenNoAdj(N: Int, paths: Array[Array[Int]]): Array[Int] = {

    import scala.collection.mutable.ArrayBuffer
    val myArrayBuffer = new ArrayBuffer[Int]()
    val mymap = scala.collection.mutable.Map[Int, Int]()
    val length: Int = paths.flatten.distinct.length

    mymap(1) = 1

    myArrayBuffer += 1

    for (i <- 2 to N) {
      val toHere = paths.filter(y => y(1) == i).map(x=>x(0))
      toHere.foreach( x => print(" == "+ x) )
      println("")

      val maxNodes = toHere.map(x => mymap.getOrElse(x, 1))
      maxNodes.foreach( x => print(" "+ x) )
      println("")

      val max = if(maxNodes.isEmpty) 1 else maxNodes.max
      println("max:" + max)
      mymap(i) = max + 1
      myArrayBuffer += max + 1
    }
    myArrayBuffer.toArray
  }
}


//total_testcases:51
//total_correct:11
//input_formatted:5, [[4,1],[4,2],[4,3],[2,5],[1,2],[1,5]]
//expected_output:[1,2,1,3,3]
//code_output:[1,2,2,2,3]
